    #SSL/TLS fix-up
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    $MainURI = #INSERT URI HERE

    <#
    Use an IE app object to allow dynamic execution of JS content. JS content performs
    re-directs to make it harder for automation
    #>
    $IEBrowserObject = New-Object -com InternetExplorer.Application

    <#
    Set this to false if you don't want to watch the magic show (i.e. run headless). True 
    will execute the action in a browser as if you were clicking them yourself.  Don't freak out
    #>
    $IEBrowserObject.visible = $True

    #Force browser to navigate to the site
    $IEBrowserObject.navigate($MainURI)    
    
    #Browser gets its nails did
    while($IEBrowserObject.Busy -eq $true){ Sleep -Milliseconds 1000 }

    <#
    Any form selecting, clicking, etc can be done here. Note that some sites try to thwart automation via JS
    through onMouse events, re-directs, etc.. Doesn't matter though, you just need to know the logic
    then find associated DOM objects Below example requires the form field to be filled and focused before 
    you can invoke the .click() DOM object 
    #>

    $FormID1 = #This is where you need to be able to extract FormID fields via debugging inside of a browser
    $IEBrowserObject.Document.getElementById($FormID1).focus() #Example of putting a field into focus
     
    $FormID2 = #This is how you would set values of a form field
    $IEBrowserObject.Document.getElementById($FormID2).value = #Some Value you want to set in the form
    
    
    $ButtonObject = #Calling a DOM object BUTTON that's associated with the form. These are typically easy to find
    #in the since their type is clearly set to BUTTON
    $IEBrowserObject.Document.getElementById($ButtonObject).click()
    
    
    #Let browser JS content cook and build objects before checking result
    Sleep 3
    <#
    After your input was sent to the site, the browser will receives a response. That response could
    potentially be more content or further logic instructions that change/add contents of DOM objects. 
    And these are what you want to observe. So here we extract the text content 
    #>
    $ClassName = #Some class ID
    $($IEBrowserObject.Document.body.getElementsByClassName($ClassName)).textContent
    
